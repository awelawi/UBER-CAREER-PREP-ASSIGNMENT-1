Part 3: Stacks and Queues (2 hrs): 
Stacks
A stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. In “pushdown stacks” only two operations are allowed: push the item onto the top of the stack, and pop the item off of the top of the stack. A stack is a limited access data structure - elements can be added and removed from the stack only at the top. (Hence the name Stack, cause you stack items on top, and remove from the top.) A helpful analogy is to think of a stack of books; you can remove only the top book, also you can add a new book on the top.
Challenge: Implement the Stack class from scratch (do not use your language’s standard stack or queue library/package methods). In this challenge, your Stack will only accept Integer values. Implement the following methods:
push() → Pushes an integer on top of the stack
pop() → Removes what is on the top of the stack, and returns that value to the caller
top() → Looks at the top value, and returns it. Does not manipulate the stack
isEmpty() → Returns True or False if the stack is Empty or not, respectively
size() → Returns an integer value with the count of elements in the stack
Here is a sample execution trace:
myStack = Stack()
myStack.push(42)
print “Top of stack: ”, myStack.top()
# prints “Top of stack: 42”
print “Size of stack: ”, myStack.size()
# prints “Size of stack: 1”
popped_value = myStack.pop()

print “Popped value: ” , popped_value
# prints “Popped value: 42”
print “Size of stack: ”, myStack.size()
# prints “Size of stack: 0”
Make sure to write extension unit tests for your stack. Consider, for example, what would happen if you pop off more items than you push.
Bonus - if you want to push yourself further, try these extra challenges!
Add a new method to your Stack class called min(), which returns the minimum element of the stack in O(1) time, as opposed to O(n) time.
Allow your stack to handle any type of object as input type, not just integers. To further illustrate this ask, consider the following execution trace:
intStack = MyCustomStack<Int>()
intStack.push(42)
# notice that this stack is accepting integers
stringStack = MyCustomStack<String>()
# notice that we are using the same MyCustomStack class, except this time we are specifying that is accepts strings
stringStack.push(“string”)
